const transitionDuration = 300
const transitionGap = 10

const transitionProps = (property = "all", duration = `${transitionDuration / 1000}s`, timingFunction = "ease", delay = "0s") =>
    `${property} ${duration} ${timingFunction} ${delay}`

const header = document.querySelector(".j_header")
const menuNavigationContext = document.querySelector(".j_menu_navigation_context")
const menuOverlay = document.querySelector(".j_menu_overlay")
const menuIcon = document.querySelector(".j_menu_icon")
const hamburgerIcon = "<i class=\"ph ph-list\"></i>"
const closeIcon = "<i class=\"ph ph-x\"></i>"
const scrollUpButton = document.querySelector(".j_scroll_up")

const carousels = document.querySelectorAll(".j_carousel")
const carouselWrapper = carousel => carousel.querySelector(".j_carousel_wrapper")
const carouselItems = carousel => carousel.querySelectorAll(".j_carousel_item")
const carouselItemDimension = (carouselItem, gap) => carouselItem.offsetWidth + gap
const carouselButtons = carousel => carousel.querySelectorAll(".j_navigation")

const navigationButtonElement = direction => {
    if (direction !== "prev" && direction !== "next") {
        return undefined
    }

    const element = document.createElement("button")
    element.className = `etl-button primary etl-carousel__navigation ${direction} j_navigation`
    element.innerHTML = `<i class="ph ph-caret-${direction === "prev" ? "left" : "right"}"></i>`

    return element
}

const modalTriggers = document.querySelectorAll(".j_modal_clickable")
const modalTriggersClose = document.querySelectorAll(".j_modal_close")
const modalElements = document.querySelectorAll(".j_modal")

const copyrightYear = document.querySelector(".j_copy_year")

const trigger = document.querySelector(".j_profile_form_clickable input")
const collapseWrapper = document.querySelector(".j_profile_form_collapse")
const wrapperIsVisible = () => window.getComputedStyle(collapseWrapper).display !== "none"

function fadeIn(element, displayElement = "block") {
    element.style.transition = transitionProps()
    element.style.opacity = 0
    element.style.display = displayElement

    setTimeout(() => {
        element.style.opacity = ""

        setTimeout(() => {
            element.style.transition = ""
        }, transitionDuration - transitionGap)
    }, transitionGap)
}

function fadeOut(element, removeElement = false) {
    element.style.transition = transitionProps()
    element.style.opacity = 0

    setTimeout(() => {
        element.style.display = "none"
        element.style.opacity = ""
        element.style.transition = ""
        removeElement && element.remove()
    }, transitionDuration)
}

function slideDown(element, displayElement = "block") {
    element.style.transition = "unset"
    element.style.display = displayElement

    let maxHeight = element.offsetHeight

    element.style.overflow = "hidden"
    element.style.maxHeight = 0
    element.style.marginTop = 0
    element.style.marginBottom = 0
    element.style.paddingTop = 0
    element.style.paddingBottom = 0
    element.style.borderTopWidth = 0
    element.style.borderBottomWidth = 0

    setTimeout(() => {
        element.style.transition = transitionProps()
        element.style.maxHeight = `${maxHeight}px`
        element.style.marginTop = ""
        element.style.marginBottom = ""
        element.style.paddingTop = ""
        element.style.paddingBottom = ""
        element.style.borderTopWidth = ""
        element.style.borderBottomWidth = ""

        setTimeout(() => {
            element.style.overflow = ""
            element.style.transition = ""
            element.style.maxHeight = ""
        }, transitionDuration - transitionGap)
    }, transitionGap)
}

function slideUp(element, removeElement = false) {
    element.style.maxHeight = `${element.offsetHeight}px`

    setTimeout(() => {
        element.style.transition = transitionProps()
        element.style.overflow = "hidden"
        element.style.maxHeight = 0
        element.style.marginTop = 0
        element.style.marginBottom = 0
        element.style.paddingTop = 0
        element.style.paddingBottom = 0
        element.style.borderTopWidth = 0
        element.style.borderBottomWidth = 0

        setTimeout(() => {
            element.style.display = "none"
            element.style.maxHeight = ""
            element.style.marginTop = ""
            element.style.marginBottom = ""
            element.style.paddingTop = ""
            element.style.paddingBottom = ""
            element.style.borderTopWidth = ""
            element.style.borderBottomWidth = ""
            element.style.overflow = ""
            element.style.transition = ""
            removeElement && element.remove()
        }, transitionDuration - transitionGap)
    }, transitionGap)
}

const SetFixedHeader = () => window.scrollY > 0
    ? header.classList.add("scrolling")
    : header.classList.remove("scrolling")

SetFixedHeader()

if (menuOverlay && menuIcon) {
    menuIcon?.addEventListener("click", () => {
        menuNavigationContext.classList.toggle("open-menu")
        menuIcon.innerHTML = menuNavigationContext.classList.contains("open-menu") ? closeIcon : hamburgerIcon
    })

    menuOverlay.addEventListener("click", event => {
        if (event.target.classList.contains("j_menu_overlay")) {
            menuNavigationContext.classList.remove("open-menu")
            menuIcon.innerHTML = hamburgerIcon
        }
    })
}

const ShowScrollUpButton = () => window.scrollY > 0
    ? scrollUpButton.classList.add("visible")
    : scrollUpButton.classList.remove("visible")

ShowScrollUpButton()

scrollUpButton.addEventListener("click", () => window.scrollTo(0, 0))

const Carousel = () => {
    Array.from(carousels).forEach(carousel => {
        const gap = parseInt(carousel.dataset.gap)
        const carouselLength = carouselItems(carousel).length
        let carouselOrder = 1
        let firstItem = true
        let lastItem = false
        let itemsQt
        let itemDimension
        let clearance
        let currentDirection

        carouselWrapper(carousel).style.transform = ""

        if (window.innerWidth <= 576) {
            itemsQt = 1
        } else if (window.innerWidth > 576 && window.innerWidth <= 992) {
            itemsQt = 2
        } else if (window.innerWidth > 992) {
            itemsQt = parseInt(carousel.dataset.itemsqt)
        }

        clearance = 40 / itemsQt
        const adjustedWidth = `calc(${100 / itemsQt}% - ${gap}px + (${gap}px / ${itemsQt}) - ${clearance}px)`

        Array.from(carouselItems(carousel)).forEach(item => {
            item.style.flexBasis = adjustedWidth
            item.style.minWidth = adjustedWidth
            itemDimension = carouselItemDimension(item, gap)
        })

        carouselWrapper(carousel).style.gap = `${gap}px`

        if (!carouselButtons(carousel) || !carouselButtons(carousel).length) {
            const buttonPrev = navigationButtonElement("prev")
            const buttonNext = navigationButtonElement("next")
            carousel.append(buttonPrev, buttonNext)
        }

        Array.from(carouselButtons(carousel)).forEach((button, i, arr) => {
            if (button.classList.contains("prev")) {
                button.classList.add("not-visible")
            }

            if (button.classList.contains("next")) {
                button.classList.remove("not-visible")
            }

            button.addEventListener("click", () => {
                arr.forEach(item => item.classList.remove("not-visible"))

                if (button.classList.contains("next")) {
                    if (currentDirection === "prev") {
                        carouselOrder++

                        if (!firstItem) {
                            carouselOrder++
                        }
                    }

                    firstItem = false

                    const wrapperOffset = carouselOrder === carouselLength - itemsQt
                        ? (itemDimension * carouselOrder) - clearance - gap - (gap / itemsQt)
                        : itemDimension * carouselOrder

                    carouselWrapper(carousel).style.transform = `translateX(-${wrapperOffset}px)`

                    if (carouselOrder < carouselLength - itemsQt) {
                        carouselOrder++
                    } else {
                        lastItem = true
                        button.classList.add("not-visible")
                    }

                    currentDirection = "next"
                }

                if (button.classList.contains("prev")) {
                    if (currentDirection === "next") {
                        carouselOrder--

                        if (!lastItem) {
                            carouselOrder--
                        }
                    }

                    lastItem = false

                    const wrapperOffset = carouselOrder < 1
                        ? itemDimension * carouselOrder
                        : (itemDimension * carouselOrder) - clearance - gap - (gap / itemsQt)

                    carouselWrapper(carousel).style.transform = `translateX(-${wrapperOffset}px)`

                    if (carouselOrder >= 1) {
                        carouselOrder--
                    } else {
                        firstItem = true
                        button.classList.add("not-visible")
                    }

                    currentDirection = "prev"
                }
            })
        })
    })
}

Carousel()

Array.from(modalTriggers).forEach(trigger => {
    trigger.addEventListener("click", () => {
        const target = trigger.dataset.target
        const modal = Array.from(modalElements).find(element => element.id === target)

        if (modal) {
            fadeIn(modal)
        }
    })
})

Array.from(modalElements).forEach(modal => {
    modal.addEventListener("click", event => {
        if (event.target.classList.contains("j_modal")) {
            fadeOut(modal)
        }
    })
})

Array.from(modalTriggersClose).forEach(trigger => {
    trigger.addEventListener("click", () => {
        const target = trigger.dataset.target
        const modal = Array.from(modalElements).find(element => element.id === target)

        if (modal) {
            fadeOut(modal)
        }
    })
})

copyrightYear.innerText = (new Date()).getFullYear()

if (trigger && collapseWrapper) {
    trigger.addEventListener("input", () => {
        if (wrapperIsVisible() && !trigger.checked) {
            slideUp(collapseWrapper)
        } else {
            slideDown(collapseWrapper, "flex")
        }
    })
}